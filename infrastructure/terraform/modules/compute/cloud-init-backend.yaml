#cloud-config
# Cloud-init script for AquaPredict Backend API Instance

package_update: true
package_upgrade: true

packages:
  - python3.11
  - python3.11-pip
  - git
  - docker
  - docker-compose
  - nginx
  - certbot
  - python3-certbot-nginx

write_files:
  - path: /etc/systemd/system/aquapredict-api.service
    content: |
      [Unit]
      Description=AquaPredict Backend API
      After=network.target docker.service
      Requires=docker.service

      [Service]
      Type=simple
      User=opc
      WorkingDirectory=/opt/aquapredict
      Environment="PATH=/usr/local/bin:/usr/bin:/bin"
      ExecStart=/usr/local/bin/docker-compose up
      ExecStop=/usr/local/bin/docker-compose down
      Restart=always
      RestartSec=10

      [Install]
      WantedBy=multi-user.target

  - path: /opt/aquapredict/.env
    content: |
      DB_CONNECTION_STRING=${db_connection_string}
      OBJECT_STORAGE_NAMESPACE=${object_storage_namespace}
      GEE_SERVICE_ACCOUNT=${gee_service_account}
      ENVIRONMENT=production
      LOG_LEVEL=INFO
    permissions: '0600'
    owner: opc:opc

  - path: /opt/aquapredict/docker-compose.yml
    content: |
      version: '3.8'
      services:
        api:
          image: ${object_storage_namespace}/aquapredict/backend:latest
          container_name: aquapredict-api
          restart: always
          ports:
            - "8000:8000"
          env_file:
            - .env
          volumes:
            - /mnt/models:/app/models
            - /var/log/aquapredict:/app/logs
          healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

  - path: /etc/nginx/sites-available/aquapredict
    content: |
      upstream api_backend {
          server localhost:8000;
      }

      server {
          listen 80;
          server_name _;

          client_max_body_size 100M;

          location / {
              proxy_pass http://api_backend;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_connect_timeout 300s;
              proxy_send_timeout 300s;
              proxy_read_timeout 300s;
          }

          location /health {
              proxy_pass http://api_backend/health;
              access_log off;
          }
      }

runcmd:
  # Setup Docker
  - systemctl enable docker
  - systemctl start docker
  - usermod -aG docker opc

  # Create directories
  - mkdir -p /opt/aquapredict
  - mkdir -p /mnt/models
  - mkdir -p /var/log/aquapredict
  - chown -R opc:opc /opt/aquapredict
  - chown -R opc:opc /mnt/models
  - chown -R opc:opc /var/log/aquapredict

  # Mount block volume for models
  - |
    while [ ! -e /dev/oracleoci/oraclevdb ]; do
      sleep 5
    done
  - mkfs.ext4 /dev/oracleoci/oraclevdb
  - echo '/dev/oracleoci/oraclevdb /mnt/models ext4 defaults,_netdev,nofail 0 2' >> /etc/fstab
  - mount -a

  # Setup Nginx
  - ln -s /etc/nginx/sites-available/aquapredict /etc/nginx/sites-enabled/
  - rm -f /etc/nginx/sites-enabled/default
  - systemctl enable nginx
  - systemctl restart nginx

  # Install OCI CLI
  - bash -c "$(curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh)" -- --accept-all-defaults

  # Pull Docker images from OCIR
  - docker login ${object_storage_namespace}.ocir.io
  - docker pull ${object_storage_namespace}.ocir.io/aquapredict/backend:latest

  # Start AquaPredict API service
  - systemctl enable aquapredict-api
  - systemctl start aquapredict-api

  # Setup firewall
  - firewall-cmd --permanent --add-service=http
  - firewall-cmd --permanent --add-service=https
  - firewall-cmd --reload

final_message: "AquaPredict Backend API instance is ready!"
