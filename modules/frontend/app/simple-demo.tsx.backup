'use client'

import { useState } from 'react'
import { Droplets, TrendingUp, Activity, FileText } from 'lucide-react'

export default function Home() {
  const [activeTab, setActiveTab] = useState('probability')
  const [location, setLocation] = useState({ lat: -1.2921, lon: 36.8219 })
  const [results, setResults] = useState<any>(null)

  const features = [
    { id: 'probability', name: 'Probabilistic Aquifer Maps', icon: Droplets, color: 'blue' },
    { id: 'forecast', name: 'Recharge/Depletion Forecasts', icon: TrendingUp, color: 'green' },
    { id: 'extraction', name: 'Sustainable Extraction', icon: Activity, color: 'purple' },
    { id: 'iso', name: 'ISO 14046 Water Stewardship', icon: FileText, color: 'orange' }
  ]

  const analyzeLocation = async () => {
    const API_URL = 'http://localhost:8000'
    const request = { latitude: location.lat, longitude: location.lon, precip_mean: 800, twi: 8.5 }

    try {
      const [prob, forecast, extraction, iso] = await Promise.all([
        fetch(`${API_URL}/api/v1/aquifer/probability-map`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(request)
        }).then(r => r.json()),
        fetch(`${API_URL}/api/v1/forecast/recharge?months=12`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(request)
        }).then(r => r.json()),
        fetch(`${API_URL}/api/v1/recommendations/extraction`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(request)
        }).then(r => r.json()),
        fetch(`${API_URL}/api/v1/reports/iso14046-brief`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(request)
        }).then(r => r.json())
      ])

      setResults({ probability: prob, forecast, extraction, iso })
    } catch (error) {
      console.error('Error:', error)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-cyan-50">
      {/* Header */}
      <header className="bg-white shadow-md border-b-4 border-blue-600">
        <div className="container mx-auto px-6 py-4">
          <h1 className="text-3xl font-bold text-blue-900">üåä AquaPredict</h1>
          <p className="text-blue-600 mt-1">Geospatial AI for Sustainable Water Management</p>
        </div>
      </header>

      <div className="container mx-auto px-6 py-8">
        {/* Core Features Banner */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-8 border-l-4 border-blue-600">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">üéØ Core Capabilities</h2>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            {features.map((feature) => {
              const Icon = feature.icon
              return (
                <button
                  key={feature.id}
                  onClick={() => setActiveTab(feature.id)}
                  className={`p-4 rounded-lg border-2 transition-all ${
                    activeTab === feature.id
                      ? `border-${feature.color}-600 bg-${feature.color}-50`
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                >
                  <Icon className={`w-8 h-8 mx-auto mb-2 text-${feature.color}-600`} />
                  <div className="text-sm font-medium text-center">{feature.name}</div>
                </button>
              )
            })}
          </div>
        </div>

        {/* Location Input */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
          <h3 className="text-xl font-bold mb-4">üìç Select Location</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium mb-2">Latitude</label>
              <input
                type="number"
                value={location.lat}
                onChange={(e) => setLocation({ ...location, lat: parseFloat(e.target.value) })}
                className="w-full px-4 py-2 border rounded-lg"
                step="0.0001"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Longitude</label>
              <input
                type="number"
                value={location.lon}
                onChange={(e) => setLocation({ ...location, lon: parseFloat(e.target.value) })}
                className="w-full px-4 py-2 border rounded-lg"
                step="0.0001"
              />
            </div>
            <div className="flex items-end">
              <button
                onClick={analyzeLocation}
                className="w-full bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 font-medium"
              >
                üîç Analyze Location
              </button>
            </div>
          </div>
        </div>

        {/* Results */}
        {results && (
          <div className="bg-white rounded-xl shadow-lg p-6">
            {/* Probability Map */}
            {activeTab === 'probability' && results.probability && (
              <div>
                <h3 className="text-2xl font-bold mb-6 text-blue-900">
                  üìä Probabilistic Aquifer Map & Depth Band Predictions
                </h3>
                
                <div className="bg-blue-50 rounded-lg p-6 mb-6">
                  <div className="text-5xl font-bold text-blue-600 mb-2">
                    {(results.probability.overall_probability * 100).toFixed(1)}%
                  </div>
                  <div className="text-gray-600">Overall Aquifer Presence Probability</div>
                  <div className="text-sm text-gray-500 mt-2">
                    Confidence: {(results.probability.confidence_interval[0] * 100).toFixed(1)}% - 
                    {(results.probability.confidence_interval[1] * 100).toFixed(1)}%
                  </div>
                </div>

                <h4 className="font-bold text-lg mb-4">Depth Band Analysis</h4>
                <div className="space-y-4">
                  {results.probability.depth_bands.map((band: any, i: number) => (
                    <div key={i} className="border-2 border-blue-200 rounded-lg p-4 hover:shadow-md transition">
                      <div className="flex justify-between items-center mb-3">
                        <div>
                          <div className="font-bold text-lg">{band.depth_range}</div>
                          <div className="text-sm text-gray-600">
                            Quality: <span className="font-medium">{band.quality}</span> | 
                            Yield: <span className="font-medium">{band.yield_lpm} L/min</span>
                          </div>
                        </div>
                        <div className="text-right">
                          <div className="text-2xl font-bold text-blue-600">
                            {(band.probability * 100).toFixed(1)}%
                          </div>
                          <div className="text-xs text-gray-500">Probability</div>
                        </div>
                      </div>
                      <div className="bg-gray-200 rounded-full h-3">
                        <div
                          className="bg-blue-600 h-3 rounded-full transition-all"
                          style={{ width: `${band.probability * 100}%` }}
                        />
                      </div>
                    </div>
                  ))}
                </div>

                <div className="mt-6 bg-green-50 border-2 border-green-200 rounded-lg p-4">
                  <div className="font-bold text-green-800 text-lg">‚úì Drilling Recommendation</div>
                  <div className="text-green-700 mt-2">
                    Target depth: <span className="font-bold">{results.probability.recommended_drilling_depth}</span> in {results.probability.geological_formation} formation
                  </div>
                </div>
              </div>
            )}

            {/* Recharge Forecast */}
            {activeTab === 'forecast' && results.forecast && (
              <div>
                <h3 className="text-2xl font-bold mb-6 text-green-900">
                  üìà Groundwater Recharge/Depletion Forecast
                </h3>
                
                <div className="grid grid-cols-3 gap-4 mb-6">
                  <div className="bg-blue-50 rounded-lg p-4">
                    <div className="text-3xl font-bold text-blue-600">
                      {results.forecast.summary.total_recharge_mm.toFixed(0)} mm
                    </div>
                    <div className="text-sm text-gray-600">Total Recharge (12 months)</div>
                  </div>
                  <div className="bg-red-50 rounded-lg p-4">
                    <div className="text-3xl font-bold text-red-600">
                      {results.forecast.summary.total_depletion_mm.toFixed(0)} mm
                    </div>
                    <div className="text-sm text-gray-600">Total Depletion (12 months)</div>
                  </div>
                  <div className={`rounded-lg p-4 ${
                    results.forecast.summary.status === 'sustainable' ? 'bg-green-50' : 'bg-yellow-50'
                  }`}>
                    <div className={`text-3xl font-bold ${
                      results.forecast.summary.status === 'sustainable' ? 'text-green-600' : 'text-yellow-600'
                    }`}>
                      {results.forecast.summary.net_change_mm.toFixed(0)} mm
                    </div>
                    <div className="text-sm text-gray-600">
                      Net Change ({results.forecast.summary.status})
                    </div>
                  </div>
                </div>

                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="bg-gray-100">
                      <tr>
                        <th className="px-4 py-2 text-left">Month</th>
                        <th className="px-4 py-2 text-right">Recharge</th>
                        <th className="px-4 py-2 text-right">Depletion</th>
                        <th className="px-4 py-2 text-right">Net Change</th>
                        <th className="px-4 py-2 text-center">Trend</th>
                      </tr>
                    </thead>
                    <tbody>
                      {results.forecast.forecast.map((month: any, i: number) => (
                        <tr key={i} className="border-b hover:bg-gray-50">
                          <td className="px-4 py-2">{month.month}</td>
                          <td className="px-4 py-2 text-right text-blue-600 font-medium">
                            {month.recharge_mm.toFixed(1)} mm
                          </td>
                          <td className="px-4 py-2 text-right text-red-600 font-medium">
                            {month.depletion_mm.toFixed(1)} mm
                          </td>
                          <td className="px-4 py-2 text-right font-bold">
                            {month.net_change_mm.toFixed(1)} mm
                          </td>
                          <td className="px-4 py-2 text-center">
                            <span className={`px-2 py-1 rounded text-xs ${
                              month.trend === 'increasing' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                            }`}>
                              {month.trend === 'increasing' ? '‚Üë' : '‚Üì'} {month.trend}
                            </span>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            )}

            {/* Extraction Recommendations */}
            {activeTab === 'extraction' && results.extraction && (
              <div>
                <h3 className="text-2xl font-bold mb-6 text-purple-900">
                  üíß Sustainable Extraction Recommendations
                </h3>
                
                <div className="bg-purple-50 rounded-lg p-6 mb-6">
                  <h4 className="font-bold text-lg mb-4">Safe Extraction Limits</h4>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <div className="text-3xl font-bold text-purple-600">
                        {results.extraction.sustainable_yield.safe_extraction_m3_year.toLocaleString()} m¬≥/yr
                      </div>
                      <div className="text-sm text-gray-600">Annual Safe Extraction</div>
                    </div>
                    <div>
                      <div className="text-3xl font-bold text-purple-600">
                        {results.extraction.sustainable_yield.safe_extraction_lpm.toFixed(1)} L/min
                      </div>
                      <div className="text-sm text-gray-600">Safe Extraction Rate</div>
                    </div>
                  </div>
                </div>

                <h4 className="font-bold text-lg mb-4">Extraction Scenarios</h4>
                <div className="space-y-4">
                  {results.extraction.extraction_scenarios.map((scenario: any, i: number) => (
                    <div key={i} className="border-2 border-purple-200 rounded-lg p-4">
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <div className="font-bold text-lg capitalize">{scenario.scenario}</div>
                          <div className="text-sm text-gray-600 mt-1">{scenario.recommended_for}</div>
                          <div className="mt-3">
                            <span className="font-medium">Extraction Rate:</span>{' '}
                            <span className="text-purple-600 font-bold">{scenario.extraction_rate_lpm.toFixed(1)} L/min</span>
                          </div>
                        </div>
                        <div className="text-right ml-4">
                          <div className="text-2xl font-bold text-green-600">
                            {(scenario.sustainability_score * 100).toFixed(0)}%
                          </div>
                          <div className="text-xs text-gray-500">Sustainability</div>
                          <div className={`mt-2 px-3 py-1 rounded text-sm font-medium ${
                            scenario.risk_level === 'very_low' ? 'bg-green-100 text-green-800' :
                            scenario.risk_level === 'low' ? 'bg-blue-100 text-blue-800' :
                            'bg-yellow-100 text-yellow-800'
                          }`}>
                            {scenario.risk_level.replace('_', ' ')}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                <div className="mt-6 bg-yellow-50 border-2 border-yellow-200 rounded-lg p-4">
                  <h4 className="font-bold text-yellow-800 mb-3">‚ö†Ô∏è Management Recommendations</h4>
                  <ul className="space-y-2">
                    {results.extraction.management_recommendations.map((rec: string, i: number) => (
                      <li key={i} className="text-sm text-yellow-700">‚Ä¢ {rec}</li>
                    ))}
                  </ul>
                </div>
              </div>
            )}

            {/* ISO 14046 Brief */}
            {activeTab === 'iso' && results.iso && (
              <div>
                <h3 className="text-2xl font-bold mb-6 text-orange-900">
                  üìã ISO 14046:2014 Water Stewardship Brief
                </h3>
                
                <div className="bg-green-50 border-2 border-green-500 rounded-lg p-4 mb-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="font-bold text-green-800 text-lg">‚úì ISO 14046:2014 Compliant</div>
                      <div className="text-sm text-green-700">Water Footprint Assessment | AWS Standard Aligned</div>
                    </div>
                    <div className="text-right text-sm text-green-600">
                      <div>Valid: 12 months</div>
                      <div>Status: Certified</div>
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-3 gap-4 mb-6">
                  <div className="border-2 border-blue-200 rounded-lg p-4">
                    <div className="text-3xl font-bold text-blue-600">
                      {results.iso.water_footprint_assessment.total_water_footprint_m3.toLocaleString()} m¬≥
                    </div>
                    <div className="text-sm text-gray-600">Total Water Footprint</div>
                  </div>
                  <div className="border-2 border-yellow-200 rounded-lg p-4">
                    <div className="text-3xl font-bold text-yellow-600">
                      {results.iso.water_footprint_assessment.water_scarcity_index.toFixed(2)}
                    </div>
                    <div className="text-sm text-gray-600">Water Scarcity Index</div>
                  </div>
                  <div className="border-2 border-green-200 rounded-lg p-4">
                    <div className="text-3xl font-bold text-green-600">
                      {(results.iso.stewardship_indicators.water_use_efficiency * 100).toFixed(0)}%
                    </div>
                    <div className="text-sm text-gray-600">Water Use Efficiency</div>
                  </div>
                </div>

                <div className="border-2 border-orange-200 rounded-lg p-4 mb-6">
                  <h4 className="font-bold mb-3">Water Footprint Breakdown</h4>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span>Blue Water (Surface/Groundwater)</span>
                      <span className="font-bold text-blue-600">
                        {results.iso.water_footprint_assessment.blue_water_footprint_m3.toLocaleString()} m¬≥
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span>Green Water (Rainwater)</span>
                      <span className="font-bold text-green-600">
                        {results.iso.water_footprint_assessment.green_water_footprint_m3.toLocaleString()} m¬≥
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span>Grey Water (Pollution)</span>
                      <span className="font-bold text-gray-600">
                        {results.iso.water_footprint_assessment.grey_water_footprint_m3.toLocaleString()} m¬≥
                      </span>
                    </div>
                  </div>
                </div>

                <div className="border-2 border-red-200 rounded-lg p-4">
                  <h4 className="font-bold mb-3">Priority Actions</h4>
                  <div className="space-y-3">
                    {results.iso.recommendations.map((rec: any, i: number) => (
                      <div key={i} className="flex items-start justify-between pb-3 border-b last:border-0">
                        <div className="flex-1">
                          <div className="font-medium">{rec.action}</div>
                          <div className="text-sm text-gray-600 mt-1">{rec.expected_impact}</div>
                        </div>
                        <div className="ml-4 text-right">
                          <div className={`px-2 py-1 rounded text-xs font-medium ${
                            rec.priority === 'high' ? 'bg-red-100 text-red-800' : 'bg-yellow-100 text-yellow-800'
                          }`}>
                            {rec.priority}
                          </div>
                          <div className="text-xs text-gray-500 mt-1">{rec.timeline}</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  )
}
